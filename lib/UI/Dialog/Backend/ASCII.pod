=head1 NAME

UI::Dialog::Backend::ASCII

=head1 SYNOPSIS

  use UI::Dialog::Backend::ASCII;
  my $d = new UI::Dialog::Backend::ASCII ( backtitle => 'Demo',
                                           title => 'Default' );

  $d->msgbox( title => 'Welcome!', text => 'Welcome one and all!' );

=head1 ABSTRACT

UI::Dialog::Backend::ASCII is the UI::Dialog backend for the native Perl mode
of basic text. The widgets are very much "rigid" in that the width and height
arguments are completely ignored.

=head1 DESCRIPTION

This backend is intended as a last resort mechanism in that no other dialog
variant has been found and so this, the most absolute of bargain basement
dialog variant interfaces, is used instead.

=head1 EXPORT

=over 2

=item None

=back

=head1 INHERITS

=over 2

=item UI::Dialog::Backend

=back

=head1 CONSTRUCTOR

=head2 new( @options )

=over 4

=item EXAMPLE

=over 6

 my $d = new UI::Dialog::Backend::ASCII ( title => 'Default Title',
                                          backtitle => 'Backtitle'
                                        );

=back

=item DESCRIPTION

=over 6

This is the Class Constructor method. It accepts a list of key => value pairs
and uses them as the defaults when interacting with the various widgets.

=back

=item RETURNS

=over 6

A blessed object reference of the UI::Dialog::Backend::ASCII class.

=back

=item OPTIONS

The (...)'s after each option indicate the default for the option.

=over 6

=item B<debug = 0,1,2> (0)

=item B<literal = 0,1> (0)

=item B<backtitle = "backtitle"> ('')

=item B<title = "title"> ('')

=item B<nocancel = 0,1> (0)

=item B<defaultno = 0,1> (0)

=item B<beepbefore = 0,1> (0)

=item B<beepafter = 0,1> (0)

=item B<extra-button = 0,1> (0)

=item B<extra-label = "extra label"> (0)

=item B<help-button = 0,1> (0)

=item B<help-label = "help label"> (0)

=item B<maxinput = \d+> (0)

=item B<autoclear = 0,1> (0)

=item B<pager = "/usr/bin/pager"> ('/usr/bin/pager')

=item B<stty = "/usr/bin/stty"> ('/usr/bin/stty')

=back

=back

=head1 WIDGET METHODS

=head2 yesno( )

=over 4

=item EXAMPLE

=over 6

 if ($d->yesno( text => 'A binary type question?') ) {
     # user pressed yes
 } else {
     # user pressed no or cancel
 }

=back

=item DESCRIPTION

=over 6

Present the end user with a message box that has two buttons, yes and no.

=back

=item RETURNS

=over 6

TRUE (1) for a response of YES or FALSE (0) for anything else.

=back

=back

=head2 msgbox( )

=over 4

=item EXAMPLE

=over 6

 $d->msgbox( text => 'A simple message' );

=back

=item DESCRIPTION

=over 6

Pesent the end user with a message box that has an OK button.

=back

=item RETURNS

=over 6

TRUE (1) for a response of OK or FALSE (0) for anything else.

=back

=back

=head2 infobox( )

=over 4

=item EXAMPLE

=over 6

 $d->infobox( text => 'A simple 6 second message.', timeout => 6000 );

=back

=item DESCRIPTION

=over 6

Pesent the end user with a message box for a limited duration of time. The
timeout is specified in thousandths of a second, ie: 1000 = 1 second.

=back

=item RETURNS

=over 6

TRUE (1) for a response of OK or FALSE (0) for anything else.

=back

=back

=head2 password( )

=over 4

=item EXAMPLE

=over 6

 my $string = $d->password( text => 'Enter some (hidden) text.' );

=back

=item DESCRIPTION

=over 6

Present the end user with a text input field that doesn't reveal the input
(except to the script) and a message.

=back

=item RETURNS

=over 6

a SCALAR if the response is OK and FALSE (0) for anything else.

=back

=back

=head2 inputbox( )

=over 4

=item EXAMPLE

=over 6

 my $string = $d->inputbox( text => 'Please enter some text...',
                            entry => 'this is the input field' );

=back

=item DESCRIPTION

=over 6

Present the end user with a text input field and a message.

=back

=item RETURNS

=over 6

a SCALAR if the response is OK and FALSE (0) for anything else.

=back

=back

=head2 textbox( )

=over 4

=item EXAMPLE

=over 6

 $d->textbox( path => '/path/to/a/text/file' );

=back

=item DESCRIPTION

=over 6

Present the end user with a simple scrolling box containing the contents
of the given text file.

=back

=item RETURNS

=over 6

TRUE (1) if the response is OK and FALSE (0) for anything else.

=back

=back

=head2 menu( )

=over 4

=item EXAMPLE

=over 6

 my $selection1 = $d->menu( text => 'Select one:',
                            list => [ 'tag1', 'item1',
                                      'tag2', 'item2',
                                      'tag3', 'item3' ]
                          );

=back

=item DESCRIPTION

=over 6

Present the user with a selectable list.

=back

=item RETURNS

=over 6

a SCALAR of the chosen tag if the response is OK and FALSE (0) for
anything else.

=back

=back

=head2 checklist( )

=over 4

=item EXAMPLE

=over 6

 my @selection = $d->checklist( text => 'Select one:',
                                list => [ 'tag1', [ 'item1', 0 ],
                                          'tag2', [ 'item2', 1 ],
                                          'tag3', [ 'item3', 1 ] ]
                              );

=back

=item DESCRIPTION

=over 6

Present the user with a selectable checklist.

=back

=item RETURNS

=over 6

an ARRAY of the chosen tags if the response is OK and FALSE (0) for
anything else.

=back

=back

=head2 radiolist( )

=over 4

=item EXAMPLE

=over 6

 my $selection = $d->radiolist( text => 'Select one:',
                                list => [ 'tag1', [ 'item1', 0 ],
                                          'tag2', [ 'item2', 1 ],
                                          'tag3', [ 'item3', 0 ] ]
                              );

=back

=item DESCRIPTION

=over 6

Present the user with a selectable radiolist.

=back

=item RETURNS

=over 6

a SCALAR of the chosen tag if the response is OK and FALSE (0) for
anything else.

=back

=back

=head2 fselect( )

=over 4

=item EXAMPLE

=over 6

 my $text = $d->fselect( path => '/path/to/a/file/or/directory' );

=back

=item DESCRIPTION

=over 6

Present the user with a file selection widget preset with the given path.

=back

=item RETURNS

=over 6

a SCALAR if the response is OK and FALSE (0) for anything else.

=back

=back

=head2 dselect( )

=over 4

=item EXAMPLE

=over 6

 my $text = $d->dselect( path => '/path/to/a/file/or/directory' );

=back

=item DESCRIPTION

=over 6

Present the user with a file selection widget preset with the given path.
Unlike fselect() this widget will only return a directory selection.

=back

=item RETURNS

=over 6

a SCALAR if the response is OK and FALSE (0) for anything else.

=back

=back

=head2 spinner( )

=over 4

=item EXAMPLE

=over 6

 print STDOUT "spinner... ";
 for (20,40,60,80,100) { print $d->spinner(); sleep(1); }
 print STDOUT "\bdone.\n";


=back

=item DESCRIPTION

=over 6

Return the next character in the spin sequence prefixed with a backspace
(\b) character. The spinner is made up of four ASCII characters; | (pipe),
\ (back slash), / (forward slash), - (hyphen).

The complete sequence is as follows:

 |
 /
 -
 \
 |
 /
 -
 \

=back

=item RETURNS

=over 6

A two character SCALAR.

=back

=back

=head2 draw_gauge( )

=over 4

=item EXAMPLE

=over 6

 foreach my $i (20,40,60,80,100) {
   last unless $d->draw_gauge( bar => "-", mark => "|", length => 74,
			       percent => $i );
   sleep(1);
 }

 foreach my $i (200,500,10000,12000,12345) {
   last unless $d->draw_gauge( bar => "-", mark => "|", length => 74,
			       current => $i, total => 12345 );
   sleep(1);
 }

=back

=item DESCRIPTION

=over 6

Draw a meter bar with a position indicator. You can specify alternate
characters for use as the meter bar itself (default is "-") and the
positional marker (default to "|") as well as an arbitrary length to the
bar itself.

There are two different ways to present the bar, either by specifying the
percentage to display or by specifying the current and total values and
and the widget will figure out the percentage for you.

=back

=item RETURNS

=over 6

None.

=back

=back

=head2 end_gauge( )

=over 4

=item EXAMPLE

=over 6

 $d->end_gauge();

=back

=item DESCRIPTION

=over 6

Simply print a newline for use when the finished with the draw_gauge() widget
as that leaves the cursor at the end of the last line of output.

=back

=item RETURNS

=over 6

None.

=back

=back

=head1 SEE ALSO

=over 2

=item PERLDOC

 UI::Dialog
 UI::Dialog::Backend
 UI::Dialog::Console

=back

=over 2

=item MAN FILES

pager(1), less(1), more(1), stty(1)

=back

=head1 BUGS

Please email the author with any bug reports. Include the name of the
module in the subject line.

=head1 AUTHOR

Kevin C. Krinke, E<lt>kckrinke@opendoorsoftware.comE<gt>

=head1 COPYRIGHT AND LICENSE

 Copyright (C) 2003  Kevin C. Krinke <kckrinke@opendoorsoftware.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

=cut
